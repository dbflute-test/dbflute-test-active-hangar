# /---------------------------------------------------------------------------
# appcls: (NotRequired - Default map:{})
#
# The definition of application classification.
#
# Specification:
# map: {
#     [classification-name] = list:{
#         ; map:{ topComment=[comment]; codeType=[String(default) or Number or Boolean] }
#         ; map:{ refCls=[projectName]@[DB classification name] ; refType=[included or exists or matches] }
#         ; map:{ code=[code]; name=[name]; alias=[alias]; comment=[comment] }
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    # as LastaFlute FreeGen, so generating AppCDef.java
    # _/_/_/_/_/_/_/_/_/_/

    # ====================================================================================
    #                                                          refCls Table Classification
    #                                                          ===========================
    # test of included, expects grouping, sub-item, sisters
    ; AppSea = list:{
        ; map:{ topComment=test of included, expects grouping, sub-item, sisters ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=included }
    }
    # test of exists, expects no grouping, no sub-item, sisters
    ; AppLand = list:{
        ; map:{ topComment=test of exists, expects no grouping, no sub-item, sisters ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=exists }
        ; map:{ code=FML ; name=OneMan ; alias=ShowBase ; comment=Formalized }
        ; map:{ code=WDL ; name=MiniO ; alias=Orlean ; comment=Withdrawal }
    }
    # test of matches, expects no grouping, no sub-item, sisters
    ; AppPiari = list:{
        ; map:{ topComment=test of matches, expects no grouping, no sub-item, sisters ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=matches }
        ; map:{ code=FML ; name=OneMan ; alias=ShowBase ; comment=Formalized }
        ; map:{ code=PRV ; name=Parade ; alias=Castle ; comment=Provisional }
        ; map:{ code=WDL ; name=MiniO ; alias=Orlean ; comment=Withdrawal }
    }
    # test of manual grouping map using refCls as included, expects overridden, added
    ; AppBonvo = list:{
        ; map:{
            ; topComment=test of manual grouping map using refCls as included, expects overridden, added
            ; codeType=String
            ; groupingMap = map:{
                # TODO jflute cannot override now (2021/07/05)
                ; serviceAvailable = map:{
                    ; groupComment = @Override, elements are changed
                    ; elementList = list:{ Formalized ; Withdrawal ; New }
                }
                # TODO jflute cannot add now (2021/07/05)
                ; appNewAvailable = map:{
                    ; groupComment = new group name as app classfication
                    ; elementList = list:{ Formalized ; Provisional ; New }
                }
            }
        }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=included }
        ; map:{ code=NEW ; name=New ; alias=NewNew ; comment=NewNewNew }
    }
    # test of manual grouping map using refCls as exists, expects new grouping is available
    ; AppDstore = list:{
        ; map:{
            ; topComment=test of manual grouping map using refCls as exists, expects new grouping is available
            ; codeType=String
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment = @Override elements are changed
                    ; elementList = list:{ OneMan }
                }
                ; appNewAvailable = map:{
                    ; groupComment = new group name as app classfication
                    ; elementList = list:{ OneMan ; MiniO }
                }
            }
        }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=exists }
        ; map:{ code=FML ; name=OneMan ; alias=ShowBase ; comment=Formalized }
        ; map:{ code=WDL ; name=MiniO ; alias=Orlean ; comment=Withdrawal }
    }
    # test of manual sub-item and sisters as included, expects merged, only order() exists
    ; AppAmba = list:{
        ; map:{ topComment=test of manual sub-item and sisters as included, expects merged, only order() exists ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=included }
        ; map:{
            ; code=MYS ; name=Mystic ; alias=Hangar ; comment=Rythms
            ; sisterCode=Choucho
            ; subItemMap=map:{ order=1 ; newKeyword=shining }
        }
    }
    # test of manual sub-item and sisters as exists, expects new only here
    ; AppMiraco = list:{
        ; map:{ topComment=test of manual sub-item and sisters as exists, expects new only here ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=exists }
        ; map:{
            ; code=FML ; name=OneMan ; alias=ShowBase ; comment=Formalized
            ; sisterCode=ONE
            ; subItemMap=map:{ order=1 ; newKeyword=shining }
        }
        ; map:{
            ; code=WDL ; name=MiniO ; alias=Orlean ; comment=Withdrawal
            ; sisterCode=MIN
            ; subItemMap=map:{ order=8 ; newKeyword=party }
        }
    }
    # test of referring group, expects grouped elements only and sub-item, sisters exist
    ; AppDohotel = list:{
        ; map:{ topComment=test of referring group, expects grouped elements only and sub-item, sisters exist ; codeType=String }
        ; map:{ refCls=maihamadb@MemberStatus.serviceAvailable ; refType=included }
    }

    # ====================================================================================
    #                                                       refCls Implicit Classification
    #                                                       ==============================
    # test of including sub-item and sisters when implicit classification
    ; AppFlg = list:{
        ; map:{ topComment=test of including sub-item and sisters when implicit classification ; codeType=String }
        ; map:{ refCls=maihamadb@Flg ; refType=included }
    }
    # test of including grouping map when implicit classification
    ; AppPaymentMethod = list:{
        ; map:{ topComment=test of including grouping map when implicit classification ; codeType=String }
        ; map:{ refCls=maihamadb@PaymentMethod ; refType=included }
    }

    # ====================================================================================
    #                                                                        Deep Whitebox
    #                                                                        =============
    # test of groupingMap when literal only
    ; DeepWxLiteralGrouping = list:{
        ; map:{
            ; topComment=test of groupingMap when literal only
            ; codeType=String
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment = can login
                    ; elementList = list:{ OneMan ; Parade }
                }
            }
        }
        ; map:{ code=FML ; name=OneMan ; alias=ShowBase ; comment=Formalized }
        ; map:{ code=PRV ; name=Parade ; alias=Castle ; comment=Provisional }
        ; map:{ code=WDL ; name=MiniO ; alias=Orlean ; comment=Withdrawal }
    }
    # test of deprecated classification top
    ; DeepWxDeprecatedCls = list:{
        ; map:{
            ; topComment=test of deprecated classification top
            ; codeType=String
            ; isDeprecated=true
        }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=included }
        ; map:{ code=ALL; name=All; alias=All Statuses; comment=without status filter }
    }
    # test of deprecatedMap
    ; DeepWxDeprecatedElement = list:{
        ; map:{
            ; topComment=test of deprecatedMap
            ; codeType=String
            ; deprecatedMap = map:{
                ; Provisional = why?
                ; All = why?why?
            }
        }
        ; map:{ refCls=maihamadb@MemberStatus ; refType=included }
        ; map:{ code=ALL; name=All; alias=All Statuses; comment=without status filter }
    }
}
# ----------------/