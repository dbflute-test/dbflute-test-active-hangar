
-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of too-many relations
-- = = = = = = = = = =/
CREATE TABLE WHITE_BASE (
	BASE_ID INTEGER NOT NULL,
	BASE_NAME VARCHAR(200) NOT NULL,
	SEA_ID INTEGER,
	LAND_ID INTEGER,
	PIARI_ID INTEGER,
	BONVO_ID INTEGER,
	DSTORE_ID INTEGER,
	AMBA_ID INTEGER,
	MIRACO_ID INTEGER,
	DOHOTEL_ID INTEGER,
	PRIMARY KEY(BASE_ID)
);

CREATE TABLE WHITE_BASE_ONE01_SEA (
	SEA_ID INTEGER NOT NULL,
	SEA_NAME VARCHAR(200) NOT NULL,
	BROADWAY_ID INTEGER,
	DOCKSIDE_ID INTEGER,
	PRIMARY KEY(SEA_ID)
);

CREATE TABLE WHITE_BASE_ONE01_SEA_BROADWAY (
	BROADWAY_ID INTEGER NOT NULL,
	BROADWAY_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(BROADWAY_ID)
);

CREATE TABLE WHITE_BASE_ONE01_SEA_DOCKSIDE (
	DOCKSIDE_ID INTEGER NOT NULL,
	DOCKSIDE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(DOCKSIDE_ID)
);

CREATE TABLE WHITE_BASE_ONE01_SEA_HANGAR (
	HANGAR_ID INTEGER NOT NULL,
	HANGAR_NAME VARCHAR(200) NOT NULL,
	SEA_ID INTEGER,
	PRIMARY KEY(HANGAR_ID)
);

CREATE TABLE WHITE_BASE_ONE01_SEA_MAGICLAMP (
	MAGICLAMP_ID INTEGER NOT NULL,
	MAGICLAMP_NAME VARCHAR(200) NOT NULL,
	SEA_ID INTEGER,
	PRIMARY KEY(MAGICLAMP_ID)
);

CREATE TABLE WHITE_BASE_ONE02_LAND (
	LAND_ID INTEGER NOT NULL,
	LAND_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(LAND_ID)
);

CREATE TABLE WHITE_BASE_ONE03_PIARI (
	PIARI_ID INTEGER NOT NULL,
	PIARI_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(PIARI_ID)
);

CREATE TABLE WHITE_BASE_ONE04_BONVO (
	BONVO_ID INTEGER NOT NULL,
	BONVO_NAME VARCHAR(200) NOT NULL,
	PARKSIDE_ID INTEGER,
	STATIONSIDE_ID INTEGER,
	PRIMARY KEY(BONVO_ID)
);

CREATE TABLE WHITE_BASE_ONE04_BONVO_PARKSIDE (
	PARKSIDE_ID INTEGER NOT NULL,
	PARKSIDE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(PARKSIDE_ID)
);

CREATE TABLE WHITE_BASE_ONE04_BONVO_STATIONSIDE (
	STATIONSIDE_ID INTEGER NOT NULL,
	STATIONSIDE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(STATIONSIDE_ID)
);

CREATE TABLE WHITE_BASE_ONE05_DSTORE (
	DSTORE_ID INTEGER NOT NULL,
	DSTORE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(DSTORE_ID)
);

CREATE TABLE WHITE_BASE_ONE06_AMBA (
	AMBA_ID INTEGER NOT NULL,
	AMBA_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(AMBA_ID)
);

CREATE TABLE WHITE_BASE_ONE07_MIRACO (
	MIRACO_ID INTEGER NOT NULL,
	MIRACO_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(MIRACO_ID)
);

CREATE TABLE WHITE_BASE_ONE08_DOHOTEL (
	DOHOTEL_ID INTEGER NOT NULL,
	DOHOTEL_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(DOHOTEL_ID)
);

alter table WHITE_BASE_ONE01_SEA_HANGAR add constraint UQ_WHITE_BASE_ONE01_SEA_HANGAR UNIQUE (SEA_ID);

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE01_SEA
	FOREIGN KEY (SEA_ID)
	REFERENCES WHITE_BASE_ONE01_SEA (SEA_ID) ;

ALTER TABLE WHITE_BASE_ONE01_SEA ADD CONSTRAINT FK_WHITE_BASE_ONE01_SEA_WHITE_BASE_ONE01_SEA_BROADWAY
	FOREIGN KEY (BROADWAY_ID)
	REFERENCES WHITE_BASE_ONE01_SEA_BROADWAY (BROADWAY_ID) ;

ALTER TABLE WHITE_BASE_ONE01_SEA ADD CONSTRAINT FK_WHITE_BASE_ONE01_SEA_WHITE_BASE_ONE01_SEA_DOCKSIDE
	FOREIGN KEY (DOCKSIDE_ID)
	REFERENCES WHITE_BASE_ONE01_SEA_DOCKSIDE (DOCKSIDE_ID) ;

ALTER TABLE WHITE_BASE_ONE01_SEA_HANGAR ADD CONSTRAINT FK_WHITE_BASE_ONE01_SEA_HANGAR_WHITE_BASE_ONE01_SEA
	FOREIGN KEY (SEA_ID)
	REFERENCES WHITE_BASE_ONE01_SEA (SEA_ID) ;

ALTER TABLE WHITE_BASE_ONE01_SEA_MAGICLAMP ADD CONSTRAINT FK_WHITE_BASE_ONE01_SEA_MAGICLAMP_WHITE_BASE_ONE01_SEA
	FOREIGN KEY (SEA_ID)
	REFERENCES WHITE_BASE_ONE01_SEA (SEA_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE02_LAND
	FOREIGN KEY (LAND_ID)
	REFERENCES WHITE_BASE_ONE02_LAND (LAND_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE03_PIARI
	FOREIGN KEY (PIARI_ID)
	REFERENCES WHITE_BASE_ONE03_PIARI (PIARI_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE04_BONVO
	FOREIGN KEY (BONVO_ID)
	REFERENCES WHITE_BASE_ONE04_BONVO (BONVO_ID) ;

ALTER TABLE WHITE_BASE_ONE04_BONVO ADD CONSTRAINT FK_WHITE_BASE_ONE04_BONVO_WHITE_BASE_ONE04_BONVO_PARKSIDE
	FOREIGN KEY (PARKSIDE_ID)
	REFERENCES WHITE_BASE_ONE04_BONVO_PARKSIDE (PARKSIDE_ID) ;

ALTER TABLE WHITE_BASE_ONE04_BONVO ADD CONSTRAINT FK_WHITE_BASE_ONE04_BONVO_WHITE_BASE_ONE04_BONVO_STATIONSIDE
	FOREIGN KEY (STATIONSIDE_ID)
	REFERENCES WHITE_BASE_ONE04_BONVO_STATIONSIDE (STATIONSIDE_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE05_DSTORE
	FOREIGN KEY (DSTORE_ID)
	REFERENCES WHITE_BASE_ONE05_DSTORE (DSTORE_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE06_AMBA
	FOREIGN KEY (AMBA_ID)
	REFERENCES WHITE_BASE_ONE06_AMBA (AMBA_ID) ;

ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE07_MIRACO
	FOREIGN KEY (MIRACO_ID)
	REFERENCES WHITE_BASE_ONE07_MIRACO (MIRACO_ID) ;

-- because defined as additional foreign key
-- ALTER TABLE WHITE_BASE ADD CONSTRAINT FK_WHITE_BASE_WHITE_BASE_ONE08_DOHOTEL
-- 	FOREIGN KEY (DOHOTEL_ID)
-- 	REFERENCES WHITE_BASE_ONE08_DOHOTEL (DOHOTEL_ID) ;

CREATE TABLE WHITE_BASE_ONE09_PALM (
	PALM_ID INTEGER NOT NULL,
	PALM_NAME VARCHAR(200) NOT NULL,
	BASE_ID INTEGER NOT NULL,
	PRIMARY KEY(PALM_ID)
);

CREATE TABLE WHITE_BASE_ONE10_CELEB (
	CELEB_ID INTEGER NOT NULL,
	CELEB_NAME VARCHAR(200) NOT NULL,
	BASE_ID INTEGER,
	PRIMARY KEY(CELEB_ID)
);

CREATE TABLE WHITE_BASE_ONE11_CIRQUE (
	CIRQUE_ID INTEGER NOT NULL,
	CIRQUE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(CIRQUE_ID)
);

CREATE TABLE WHITE_BASE_ONE12_AMPHI (
	AMPHI_ID INTEGER NOT NULL,
	AMPHI_NAME VARCHAR(200) NOT NULL,
	BASE_ID INTEGER NOT NULL,
	PRIMARY KEY(AMPHI_ID)
);

alter table WHITE_BASE_ONE09_PALM add constraint UQ_WHITE_BASE_ONE09_PALM UNIQUE (BASE_ID);
alter table WHITE_BASE_ONE10_CELEB add constraint UQ_WHITE_BASE_ONE10_CELEB UNIQUE (BASE_ID);
alter table WHITE_BASE_ONE12_AMPHI add constraint UQ_WHITE_BASE_ONE12_AMPHI UNIQUE (BASE_ID);

ALTER TABLE WHITE_BASE_ONE09_PALM ADD CONSTRAINT FK_WHITE_BASE_ONE09_PALM_WHITE_BASE
	FOREIGN KEY (BASE_ID)
	REFERENCES WHITE_BASE (BASE_ID) ;

ALTER TABLE WHITE_BASE_ONE10_CELEB ADD CONSTRAINT FK_WHITE_BASE_ONE10_CELEB_WHITE_BASE
	FOREIGN KEY (BASE_ID)
	REFERENCES WHITE_BASE (BASE_ID) ;

ALTER TABLE WHITE_BASE_ONE11_CIRQUE ADD CONSTRAINT FK_WHITE_BASE_ONE11_CIRQUE_WHITE_BASE
	FOREIGN KEY (CIRQUE_ID)
	REFERENCES WHITE_BASE (BASE_ID) ;

-- because defined as additional foreign key
-- ALTER TABLE WHITE_BASE_ONE12_AMPHI ADD CONSTRAINT FK_WHITE_BASE_ONE12_AMPHI_WHITE_BASE
--	FOREIGN KEY (BASE_ID)
--	REFERENCES WHITE_BASE (BASE_ID) ;


-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of classification deployment
-- = = = = = = = = = =/
CREATE TABLE WHITE_CLASSIFICATION_DEPLOYMENT (
	DEPLOYMENT_ID NUMERIC(16) NOT NULL,
	SEA_FLG INTEGER NOT NULL,
	DEPLOYMENT_TYPE_CODE CHAR(3) NOT NULL,
	PRIMARY KEY(DEPLOYMENT_ID)
);

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of compound PK
-- = = = = = = = = = =/
CREATE TABLE WHITE_COMPOUND_PK (
	PK_FIRST_ID NUMERIC(16) NOT NULL,
	PK_SECOND_ID NUMERIC(16) NOT NULL,
	COMPOUND_PK_NAME VARCHAR(200) NOT NULL,
	REFERRED_ID INTEGER NOT NULL,
	PRIMARY KEY(PK_FIRST_ID, PK_SECOND_ID)
);

CREATE TABLE WHITE_COMPOUND_PK_REF_PHYSICAL (
	REF_FIRST_ID NUMERIC(16) NOT NULL,
	REF_SECOND_ID NUMERIC(16) NOT NULL,
	REF_THIRD_ID NUMERIC(16) NOT NULL,
	COMPOUND_REF_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(REF_FIRST_ID, REF_SECOND_ID, REF_THIRD_ID)
);

ALTER TABLE WHITE_COMPOUND_PK_REF_PHYSICAL ADD CONSTRAINT FK_WHITE_COMPOUND_PK_REF_PHYSICAL_FIRST_SECOND
	FOREIGN KEY (REF_FIRST_ID, REF_SECOND_ID)
	REFERENCES WHITE_COMPOUND_PK (PK_FIRST_ID, PK_SECOND_ID) ;

CREATE TABLE WHITE_COMPOUND_PK_REF_VIRTUAL (
	REF_FIRST_ID NUMERIC(16) NOT NULL,
	REF_SECOND_ID NUMERIC(16) NOT NULL,
	REF_THIRD_ID NUMERIC(16) NOT NULL,
	COMPOUND_REF_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(REF_FIRST_ID, REF_SECOND_ID, REF_THIRD_ID)
);

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of fixed-only biz-one-to-one
-- = = = = = = = = = =/
CREATE TABLE WHITE_DATE_TERM (
	DATE_TERM_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	DATE_TERM_VALUE VARCHAR(200) NOT NULL,
	BEGIN_DATE DATE NOT NULL,
	END_DATE DATE NOT NULL
);

-- /= = = = = = = = = = = = = =
-- for the test of DB comment
-- = = = = = = = = = =/
CREATE TABLE WHITE_DB_COMMENT (
	DB_COMMENT_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	DB_COMMENT_NAME VARCHAR(200) NOT NULL
);

comment on table WHITE_DB_COMMENT is 'DBコメント: テーブルコメントのエスケープのテスト...
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
o (table)mapStyle, map:{ sea = mystic ; land = oneman } そのまま書いても大丈夫？ 
o (table)mapStyle, map:\{ sea \= mystic \; land \= oneman \} エスケープされてても大丈夫？ 
o (table)DBコメントで、ベタッと ''シングルクォーテーション'' で囲うけど大丈夫？
o (table)DBコメントで、ベタッと <span>HTMLタグ</span> で囲うけど大丈夫？
o (table)DBコメントで、ベタッと &lt;HTMLエスケープ表現&gt; で囲うけど大丈夫？ (もともとSchemaHTML的にダメみたい!?)
o (table)あと、DBコメントは、"JavaDoc" でも使われるし、DBMetaで "文字列リテラル" で使われるけど大丈夫？
o (table)なので、@author jflute とか入ってても大丈夫？ あと、改行 "\n" とか、エスケエスケ "\\" とか大丈夫？
_/_/_/_/_/_/_/_/_/_/
';

comment on column WHITE_DB_COMMENT.DB_COMMENT_NAME is 'DBコメント名: カラムコメントのエスケープのテスト...
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
o (column)mapStyle, map:{ sea = mystic ; land = oneman } そのまま書いても大丈夫？ 
o (column)mapStyle, map:\{ sea \= mystic \; land \= oneman \} エスケープされてても大丈夫？ 
o (column)DBコメントで、ベタッと ''シングルクォーテーション'' で囲うけど大丈夫？
o (column)DBコメントで、ベタッと <span>HTMLタグ</span> で囲うけど大丈夫？
o (column)DBコメントで、ベタッと &lt;HTMLエスケープ表現&gt; で囲うけど大丈夫？ (もともとSchemaHTML的にダメみたい!?)
o (column)あと、DBコメントは、"JavaDoc" でも使われるし、DBMetaで "文字列リテラル" で使われるけど大丈夫？
o (column)なので、@author jflute とか入ってても大丈夫？ あと、改行 "\n" とか、エスケエスケ "\\" とか大丈夫？
_/_/_/_/_/_/_/_/_/_/
';

CREATE TABLE WHITE_DB_COMMENT_ADDITIONAL (
	DB_COMMENT_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	DB_COMMENT_NAME VARCHAR(200) NOT NULL,
	DB_COMMENT_COUNT INTEGER NOT NULL,
	DB_COMMENT_DATE DATE NOT NULL,
	DB_COMMENT_DATETIME DATETIME NOT NULL
);

comment on table WHITE_DB_COMMENT_ADDITIONAL is 'DBコメント追加的: テーブルコメントのエスケープのテスト...
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
o (table)mapStyle, map:{ sea = mystic ; land = oneman } そのまま書いても大丈夫？ 
o (table)mapStyle, map:\{ sea \= mystic \; land \= oneman \} エスケープされてても大丈夫？ 
o (table)DBコメントで、ベタッと ''シングルクォーテーション'' で囲うけど大丈夫？
o (table)DBコメントで、ベタッと <span>HTMLタグ</span> で囲うけど大丈夫？
o (table)DBコメントで、ベタッと &lt;HTMLエスケープ表現&gt; で囲うけど大丈夫？ (もともとSchemaHTML的にダメみたい!?)
o (table)あと、DBコメントは、"JavaDoc" でも使われるし、DBMetaで "文字列リテラル" で使われるけど大丈夫？
o (table)なので、@author jflute とか入ってても大丈夫？ あと、改行 "\n" とか、エスケエスケ "\\" とか大丈夫？
_/_/_/_/_/_/_/_/_/_/
';

comment on column WHITE_DB_COMMENT_ADDITIONAL.DB_COMMENT_NAME is 'DBコメント名: カラムコメントのエスケープのテスト...
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
o (column)mapStyle, map:{ sea = mystic ; land = oneman } そのまま書いても大丈夫？ 
o (column)mapStyle, map:\{ sea \= mystic \; land \= oneman \} エスケープされてても大丈夫？ 
o (column)DBコメントで、ベタッと ''シングルクォーテーション'' で囲うけど大丈夫？
o (column)DBコメントで、ベタッと <span>HTMLタグ</span> で囲うけど大丈夫？
o (column)DBコメントで、ベタッと &lt;HTMLエスケープ表現&gt; で囲うけど大丈夫？ (もともとSchemaHTML的にダメみたい!?)
o (column)あと、DBコメントは、"JavaDoc" でも使われるし、DBMetaで "文字列リテラル" で使われるけど大丈夫？
o (column)なので、@author jflute とか入ってても大丈夫？ あと、改行 "\n" とか、エスケエスケ "\\" とか大丈夫？
_/_/_/_/_/_/_/_/_/_/
';


-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of deprecated select-by-pk-uq
-- = = = = = = = = = =/
CREATE TABLE WHITE_DEPRECATED_SELECT_BY_PKUQ (
	SELECT_BY_PKUQ_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	SELECT_BY_PKUQ_NAME VARCHAR(200) NOT NULL,
	SELECT_BY_PKUQ_CODE VARCHAR(16) NOT NULL
);

alter table WHITE_DEPRECATED_SELECT_BY_PKUQ add constraint UQ_WHITE_DEPRECATED_SELECT_BY_PKUQ UNIQUE (SELECT_BY_PKUQ_CODE);

-- /= = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of deprecated specify batch-column
-- = = = = = = = = = =/
CREATE TABLE WHITE_DEPRECATED_SPECIFY_BATCH_COLUMN (
	SPECIFY_BATCH_COLUMN_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	SPECIFY_BATCH_COLUMN_NAME VARCHAR(200) NOT NULL
);

-- /= = = = = = = = = = = = = =
-- for the test of first date
-- = = = = = = = = = =/
CREATE TABLE WHITE_FIRST_DATE (
	FIRST_DATE_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	FIRST_DATE_NAME VARCHAR(200) NOT NULL,
	ADDED_AT_TABLE_SAME_DATE DATE NOT NULL
);

-- /= = = = = = = = = = = =
-- for the test of NotNull
-- = = = = = = = = = =/
CREATE TABLE WHITE_NOT_NULL (
	NOT_NULL_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	NOT_NULL_NAME VARCHAR(200) NOT NULL,
	NOT_NULL_COUNT INTEGER,
	NOT_NULL_DATE DATE,
	NOT_NULL_DATETIME DATETIME
);

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of various
-- = = = = = = = = = =/
CREATE TABLE WHITE_ON_PARADE (
	ON_PARADE_ID NUMERIC(16) NOT NULL,
	ON_PARADE_NAME VARCHAR(100) NOT NULL,
	PRIMARY KEY(ON_PARADE_ID)
);

CREATE TABLE WHITE_ON_PARADE_REF (
	REF_ID NUMERIC(16) NOT NULL,
	REF_NAME VARCHAR(100) NOT NULL,
	NULLABLE_FK_ON_PARADE_ID NUMERIC(16),
	NULLABLE_FK_TO_MANY_ID NUMERIC(16),
	PRIMARY KEY(REF_ID)
);

CREATE TABLE WHITE_ON_PARADE_NULLABLE_TO_MANY (
	MANY_ID NUMERIC(16) NOT NULL,
	MANY_NAME VARCHAR(100) NOT NULL,
	PRIMARY KEY(MANY_ID)
);

ALTER TABLE WHITE_ON_PARADE_REF ADD CONSTRAINT FK_WHITE_ON_PARADE_REF_ON_PARADE
	FOREIGN KEY (NULLABLE_FK_ON_PARADE_ID)
	REFERENCES WHITE_ON_PARADE (ON_PARADE_ID) ;

ALTER TABLE WHITE_ON_PARADE_REF ADD CONSTRAINT FK_WHITE_ON_PARADE_REF_MANY_MANY
	FOREIGN KEY (NULLABLE_FK_TO_MANY_ID)
	REFERENCES WHITE_ON_PARADE_NULLABLE_TO_MANY (MANY_ID) ;

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of read-only table
-- = = = = = = = = = =/
CREATE TABLE WHITE_READ_ONLY (
	READ_ONLY_ID NUMERIC(16) NOT NULL,
	READ_ONLY_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY(READ_ONLY_ID)
);

-- /= = = = = = = = = = = = = =
-- for the test of schema diff
-- = = = = = = = = = =/
CREATE TABLE WHITE_SCHEMA_DIFF (
	SCHEMA_DIFF_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	SCHEMA_DIFF_NAME VARCHAR(200) NOT NULL,
	SCHEMA_DIFF_DATE DATE NOT NULL
);

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of self reference
-- = = = = = = = = = =/
CREATE TABLE WHITE_SELF_REFERENCE (
	SELF_REFERENCE_ID INTEGER NOT NULL,
	SELF_REFERENCE_NAME VARCHAR(200) NOT NULL,
	PARENT_ID INTEGER,
	PRIMARY KEY(SELF_REFERENCE_ID)
);

ALTER TABLE WHITE_SELF_REFERENCE ADD CONSTRAINT FK_WHITE_SELF_REFERENCE_PARENT_ID
	FOREIGN KEY (PARENT_ID)
	REFERENCES WHITE_SELF_REFERENCE (SELF_REFERENCE_ID) ;

-- /= = = = = = = = = = = = = =
-- for the test of simple dto
-- = = = = = = = = = =/
CREATE TABLE WHITE_SIMPLE_DTO_EXCEPT (
	SIMPLE_DTO_EXCEPT_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	SIMPLE_DTO_EXCEPT_NAME VARCHAR(200) NOT NULL
);

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of single PK
-- = = = = = = = = = =/
CREATE TABLE WHITE_SINGLE_PK (
	ONLY_ONE_PK_ID NUMERIC(16) NOT NULL,
	SINGLE_PK_NAME VARCHAR(200) NOT NULL,
	REFERRED_ID INTEGER NOT NULL,
	PRIMARY KEY(ONLY_ONE_PK_ID)
);

-- /= = = = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of tsv loading
-- (contains test of empty string for not null column)
-- = = = = = = = = = =/
CREATE TABLE WHITE_TSV_LOADING (
	TSV_LOADING_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	TSV_LOADING_NAME VARCHAR(200) NOT NULL,
	LOADING_COUNT INTEGER,
	LOADING_DATE DATE NOT NULL,
	BEGIN_DATETIME DATETIME NOT NULL,
	END_DATETIME DATETIME,
	LARGE_FROM_FILE VARCHAR(600) NULL,
	EMPTY_STRING_ALLOWED VARCHAR(32) NOT NULL,
	DONE_FLG BOOLEAN NOT NULL
);

-- /= = = = = = = = = = = = = =
-- for the test of type mapping
-- = = = = = = = = = =/
CREATE TABLE WHITE_TYPE_MAPPING (
	TYPE_MAPPING_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	TYPE_MAPPING_NAME VARCHAR(200) NOT NULL,
	TYPE_MAPPING_COUNT INTEGER,
	TYPE_MAPPING_DATE DATE,
	TYPE_MAPPING_DATETIME DATETIME,
	POINT_MAPPING_DATE DATETIME
);
