# /---------------------------------------------------------------------------
# littleAdjustmentMap: (NotRequired - Default map:{})
#
# The various settings about a little adjustment.
#
# o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
# o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
# o isAvailableDatabaseDependency: (NotRequired - Default false)
# o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
# o classificationUndefinedHandlingType: (NotRequired - Default LOGGING)
# o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
# o isTableDispNameUpperCase: (NotRequired - Default false)
# o isTableSqlNameUpperCase: (NotRequired - Default false)
# o isColumnSqlNameUpperCase: (NotRequired - Default false)
# o isSpecifyColumnRequired: (NotRequired - Default false)
# o extendedDBFluteInitializerClass: (NotRequired - Default null)
# o shortCharHandlingMode: (NotRequired - Default NONE)
# o quoteTableNameList: (NotRequired - Default list:{})
# o quoteColumnNameList: (NotRequired - Default list:{})
# o columnNullObjectMap: (NotRequired - Default map:{})
# o relationalNullObjectMap: (NotRequired - Default map:{})
# o cursorSelectFetchSize: (NotRequired - Default null)
# o refreshMap: (NotRequired - Default map:{})
# o optimisticLockMap: (NotRequired - Default map:{})
#
# *The line that starts with '#' means comment-out.
#
map:{
    # the test of deprecated for selectByPK() and selectByUniqueOf()
    ; deprecatedSelectByPKUQMap = map:{
        ; deprecatedComment = this is the test of deprecated comment of deprecatedSelectByPKUQMap
        ; tableExceptList = list:{}
        ; tableTargetList = list:{ WHITE_DEPRECATED_SELECT_BY_PKUQ }
    }

    # the test of deprecated for everyColumn() and except...Column()
    ; deprecatedSpecifyBatchColumnMap = map:{
        ; deprecatedComment = this is the test of deprecated comment of deprecatedSpecifyBatchColumnMap
        ; tableExceptList = list:{}
        ; tableTargetList = list:{ WHITE_DEPRECATED_SPECIFY_BATCH_COLUMN }
    }

    # the test of public native InScope
    ; isCompatibleNativeInScopePublicForcedly = true

    # the test of date-time precision truncation
    # (comment it out and generate if you test)
    ; isDatetimePrecisionTruncationOfCondition = true
    ; isDatetimePrecisionTruncationOfUpdatedEntity = true

    # the test of common original methods for behavior
    ; extendedAbstractBehaviorWritableClass = org.docksidestage.hangar.dbflute.nogen.ExtendedAbstractBehaviorWritable

    # the test of read-only table
    ; readOnlyTableNameList = list:{ WHITE_READ_ONLY }

    # the test of suppressing CDef old style
    ; isMakeCDefOldStyleCodeOfMethod = true
    ; isMakeCDefOldStyleNameOfMethod = false
    ; isMakeCDefOldStyleListOfMethod = false
    ; isMakeCDefOldStyleGroupOfMethod = false

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingSchemaToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add schema to table SQL name. (The table name on query is SCHEMA.TABLE)
    #
    #   [false]
    #     Non.
    #
    ; isAvailableAddingSchemaToTableSqlName = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableAddingCatalogToTableSqlName: (NotRequired - Default false)
    #   [true]
    #     Add catalog to table SQL name. (The table name on query is CATALOG.SCHEMA.TABLE)
    #     This property works only when isAvailableAddingSchemaToTableSqlName is true.
    #
    #   [false]
    #     Non.
    #
    ; isAvailableAddingCatalogToTableSqlName = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseDependency: (NotRequired - Default false)
    #   [true]
    #     Generate the method that depends on the database.
    #     For example: cb.lockWithRR() at DB2.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableDatabaseDependency = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableDatabaseNativeJDBC: (NotRequired - Default false)
    #   [true]
    #     Use classes of database native JDBC on generated classes
    #     to get best performances of DB access.
    #     Your project needs to refer to database native JDBC.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableDatabaseNativeJDBC = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isAvailableNonPrimaryKeyWritable: (NotRequired - Default false)
    #   [true]
    #     Generate writable methods at non-primary-key table.
    #
    #   [false]
    #     Non.
    #
    #; isAvailableNonPrimaryKeyWritable = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o classificationUndefinedHandlingType: (NotRequired - Default LOGGING)
    #  The handling type when undefined classification is found.
    #
    #   EXCEPTION - throws exception when found
    #   LOGGING   - logging only when found
    #   ALLOWED   - no action
    #
    #; classificationUndefinedHandlingType = EXCEPTION
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeEntityChaseRelation: (NotRequired - Default false)
    #   [true]
    #     Make chase-relation methods of entity.
    #     For example: member.chaseMemberStatus().getMemberStatusName()
    #     This statement doesn't have a null pointer if the MemberStatus doesn't exist.
    #
    #   [false]
    #     Non.
    #
    #; isMakeEntityChaseRelation = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isEntityConvertEmptyStringToNull: (NotRequired - Default false)
    #   [true]
    #     Convert empty-string data to null in entity.
    #
    #   [false]
    #     Non.
    #
    ; isEntityConvertEmptyStringToNull = true
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isMakeConditionQueryEqualEmptyString: (NotRequired - Default false)
    #   [true]
    #     Make equal-empty-string methods of condition-query.
    #     For example: cb.query().setMemberName_Equal_EmptyString()
    #
    #   [false]
    #     Non.
    #
    #; isMakeConditionQueryEqualEmptyString = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isTableSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Table names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    #; isTableSqlNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isColumnSqlNameUpperCase: (NotRequired - Default false)
    #   [true]
    #     Column names on SQL executed by condition-bean or behavior
    #     are forcedly treated as upper case. (except outside-SQL)
    #
    #   [false]
    #     Non.
    #
    #; isColumnSqlNameUpperCase = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o isSpecifyColumnRequired: (NotRequired - Default false)
    #   [true]
    #     SpecifyColumn of ConditionBean is required. (exception if no specified columns)
    #
    #; isSpecifyColumnRequired = false
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o extendedDBFluteInitializerClass: (NotRequired - Default '')
    #  If you want to extend the embedded DBFlute initializer,
    #  specify the class name of your original initializer
    #  that extends the embedded one.
    #  *Basically for fixed DBFluteConfig settings
    #
    # @JavaOnly
    ; extendedDBFluteInitializerClass = org.docksidestage.hangar.dbflute.nogen.ExtendedDBFluteInitializer
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o shortCharHandlingMode: (NotRequired - Default NONE)
    #  If the parameter of condition-bean or parameter-bean has short size,
    #   NONE - Do nothing. (default)
    #   EXCEPTION - It throws an exception.
    #   RFILL - It fills the parameter by right spaces.
    #   LFILL - It fills the parameter by left spaces.
    #
    ; shortCharHandlingMode = EXCEPTION
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteTableNameList: (NotRequired - Default list:{})
    #  The list of table DB names that need to be quoted.
    #  Specified tables is quoted on auto-generated SQL.
    #
    #; quoteTableNameList = list:{}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o quoteColumnNameList: (NotRequired - Default list:{})
    #  The list of column DB names that need to be quoted.
    #  Specified columns is quoted on auto-generated SQL.
    #
    #; quoteColumnNameList = list:{}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o columnNullObjectMap: (NotRequired - Default map:{})
    #  You can get a null object when the column is null.
    #
    ; columnNullObjectMap = map:{
        ; providerPackage = $$packageBase$$.nogen.cache
        ; isGearedToSpecify = true
        ; columnMap = map:{
            ; PRODUCT_STATUS = map:{
                ; DISPLAY_ORDER = CachedProductStatus.getInstance().getColumn(this, "$$columnName$$", $$primaryKey$$)
            }
            ; MEMBER_WITHDRAWAL = map:{
                ; WITHDRAWAL_REASON_INPUT_TEXT = CachedMemberWithdrawal.getInstance().getColumn(this, "$$columnName$$", $$primaryKey$$)
            }
        }
    }
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o relationalNullObjectMap: (NotRequired - Default map:{})
    #  You can get a null object when the relation is null.
    #
    ; relationalNullObjectMap = map:{
        ; providerPackage = $$packageBase$$.nogen.cache
        ; foreignMap = map:{
            ; PRODUCT_STATUS = CachedProductStatus.getInstance().getRelational(this, "$$foreignPropertyName$$", $$primaryKey$$)
        }
    }
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o cursorSelectFetchSize: (NotRequired - Default null)
    #  The fetch size of JDBC parameter for cursor select.
    #  For example, specify Integer.MIN_VALUE to enable fetch of MySQL.
    #
    ; cursorSelectFetchSize = 17
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o refreshMap: (NotRequired - Default map:{projectName=$$AutoDetect$$ ; requestUrl=http://localhost:8386/})
    #  If you use synchronizer and specify this property, no need to refresh(F5) your eclipse project.
    #  The projectName can be set plural names by slash '/'. e.g. sea/land
    #
    #; refreshMap = map:{
    #    ; projectName = $$AutoDetect$$
    #    ; requestUrl = http://localhost:8386/
    #}
    # - - - - - - - - - -/

    # /- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    # o optimisticLockMap: (NotRequired - Default map:{})
    #  The definition for optimistic lock of DBFlute.
    #
    #; optimisticLockMap = map:{
    #    # o updateDateFieldName: (NotRequired - Default '')
    #    ; updateDateFieldName = UPDATE_DATE
    #
    #    # o versionNoFieldName: (NotRequired - Default 'VERSION_NO')
    #    #  The column name of version no for optimistic lock.
    #    #  Basically you don't need this if your tables have the column 'VERSION_NO'.
    #    #  because the default value is 'VERSION_NO'.
    #    ; versionNoFieldName = VERSION_NO
    #}
    # - - - - - - - - - -/
}
# ----------------/