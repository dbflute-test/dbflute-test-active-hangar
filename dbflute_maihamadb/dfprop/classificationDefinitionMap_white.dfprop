# /---------------------------------------------------------------------------
# classificationDefinitionMap: (NotRequired - Default map:{})
#
# The definition of classification.
#
# Specification:
# map: {
#     [classification-name] = list:{
#         ; map:{
#             ; topComment=[comment]; codeType=[String(default) or Number or Boolean]
#             ; undefinedHandlingType=[EXCEPTION or LOGGING(default) or ALLOWED]
#             ; isUseDocumentOnly=[true or false(default)]
#             ; isSuppressAutoDeploy=[true or false(default)]
#             ; groupingMap = map:{
#                 ; [group-name] = map:{
#                     ; groupComment=[comment]
#                     ; elementList=list:{[the list of classification element's name]}
#                 }
#             }
#         }
#         # classification elements for implicit classification
#         ; map:{
#             ; code=[code]; name=[name]; alias=[alias]; comment=[comment]
#             ; sisterCode=[code or code-list]; subItemMap=map:{[free-map]}
#         }
#         # settings for table classification
#         ; map:{
#             ; table=[table-name]
#             ; code=[column-name for code]; name=[column-name for name]
#             ; alias=[column-name for alias]; comment=[column-name for comment]}
#             ; where=[condition for select]; orderBy=[column-name for ordering]
#             ; exceptCodeList=[the list of except code]
#         }
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    # ====================================================================================
    #                                                                      Deployment Test
    #                                                                      ===============
    ; WhiteClassifiationDeploymentType = list:{
        ; map:{
            ; topComment=test of deployment
            ; codeType=String ; undefinedHandlingType=EXCEPTION
        }
        ; map:{code=SEA;name=Sea ;alias=sea}
        ; map:{code=LAN;name=Land;alias=land}
    }
    
    # ====================================================================================
    #                                                                    Table Option Test
    #                                                                    =================
    ; WhiteTableOptionStatus = list:{
        ; map:{
            ; topComment=test of various options when table classification
            ; codeType=String ; undefinedHandlingType=EXCEPTION
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment=can use service

                    # by name attribute, safety (exception if not found)
                    ; elementList=list:{ Formalized ; Provisional }
                }
            }
        }
        ; map:{
            ; table=MEMBER_STATUS
            ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER

            # can use column name for sister code
            # while, cannot define sisters if no column
            ; sisterCode=list:{ DISPLAY_ORDER }

            # can use column name for sub item
            # while, cannot define sisters if no column
            ; subItemMap=map:{
                ; key1=DISPLAY_ORDER
                ; key2=DESCRIPTION
            }
        }
    }
    # #for_now existing at mysql test by jflute (2022/05/14)
    ## test of isSuppressNameCamelizing, which is only for table classification
    #; WhiteNamingNoCamelizingType = list:{
    #    ; map:{
    #        ; topComment=no camelizing classification
    #        ; codeType=String
    #        ; isSuppressNameCamelizing=true
    #    }
    #    ; map:{
    #        ; table=WHITE_CLS_NO_CAMELIZING
    #        ; code=NO_CAMELIZING_CODE; name=NO_CAMELIZING_NAME
    #    }
    #}

    # ====================================================================================
    #                                                                   Grouping Reference
    #                                                                   ==================
    ; GroupingReference = list:{
        ; map:{
            ; topComment=the test of reference variable in grouping map
            ; codeType=String
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment = サービスが利用できる会員
                    ; elementList = list:{LAND_NAME;SEA_NAME}
                }
                ; servicePlus = map:{
                    ; elementList = list:{$$ref$$.serviceAvailable ; IKSPIARY_NAME}
                }
                ; nestedPlus = map:{
                    ; elementList = list:{ AMPHI_NAME ; $$ref$$.servicePlus }
                }
                ; oneDef = map:{
                    ; elementList = list:{ IKSPIARY_NAME }
                }
                ; twoRef = map:{
                    ; elementList = list:{ $$ref$$.serviceAvailable ; $$ref$$.oneDef }
                    ; isUseDocumentOnly = true
                }
                ; dupRef = map:{
                    ; elementList = list:{ $$ref$$.servicePlus ; $$ref$$.oneDef }
                }
            }
        }
        ; map:{code=LND; name=LAND_NAME}
        ; map:{code=SEA; name=SEA_NAME}
        ; map:{code=IKS; name=IKSPIARY_NAME}
        ; map:{code=AMP; name=AMPHI_NAME}
    }

    # the test of document only
    ; DocumentOnly = list:{
        ; map:{
            ; topComment=The test of document only classification
            ; codeType=String; isUseDocumentOnly=true; isCheckImplicitSet=true
        }
        ; map:{code=FOO; name=FOO_NAME}
        ; map:{code=BAR; name=BAR_NAME}
    }


    # ====================================================================================
    #                                                                      Deprecated Test
    #                                                                      ===============
    # the test of deprecated element
    ; DeprecatedTopBasicType = list:{
        ; map:{
            ; topComment=is deprecated classification
            ; codeType=String; isCheckImplicitSet=true
            ; isDeprecated = true
        }
        ; map:{code=FOO; name=FooName}
        ; map:{code=BAR; name=BarName}
        ; map:{code=QUX; name=QuxName}
    }

    # the test of deprecated element
    ; DeprecatedMapBasicType = list:{
        ; map:{
            ; topComment=has deprecated element
            ; codeType=String; isCheckImplicitSet=true
            ; deprecatedMap = map:{ BarName = test of deprecated }
        }
        ; map:{code=FOO; name=FooName}
        ; map:{code=BAR; name=BarName}
        ; map:{code=QUX; name=QuxName}
    }

    # the test of deprecated element
    ; DeprecatedMapCollaborationType = list:{
        ; map:{
            ; topComment=has deprecated element
            ; codeType=String; isCheckImplicitSet=true
            ; groupingMap = map:{
                ; containsDeprecated = map:{
                    ; groupComment = contains deprecated element here
                    ; elementList = list:{ FooName ; BarName }
                }
            }
            ; deprecatedMap = map:{ BarName = test of deprecated ; QuxName = no original comment }
        }
        ; map:{code=FOO; name=FooName}
        ; map:{code=BAR; name=BarName; alias=BarBar; comment=here}
        ; map:{code=QUX; name=QuxName; alias=QuxQux}
    }

    # ====================================================================================
    #                                                                         Super Tricky
    #                                                                         ============
    # _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
    # from MySQL example by jflute(2022/04/17)
    # _/_/_/_/_/_/_/_/_/_/
    # the test of top comment only
    ; TopCommentOnly = list:{
        ; map:{
            ; topComment=The test of top only
        }
    }

    # the test of sub-item map for implicit classification
    ; SubItemImplicit = list:{
        ; map:{
            ; topComment=the test of sub-item map for implicit classification
            ; codeType=Number; isCheckImplicitSet=true
        }
        ; map:{
            ; code=FOO;name=Foo;alias=Aaa;comment=means foo
            ; subItemMap=map:{
                ; regularStringItem=value1<tag> ; regularNumberItem=123
                ; regularVariousItem=list:{reg;var;ite}
                ; listItem=list:{aa;bb;cc}
            }
        }
        ; map:{
            ; code=BAR;name=Bar;alias=Bbb;comment=means bar
            ; subItemMap=map:{
                ; regularStringItem=value2<teg> ; regularNumberItem=456
                ; regularVariousItem=map:{reg=var;ous=ite}
                ; mapItem=map:{key11=value11}
                ; containsLine = va
lue
            }
        }
    }

    # the test of sub-item map for table classification
    # and groupingMap for table classification with japanese
    ; SubItemTable = list:{
        ; map:{
            ; topComment=the test of sub-item map for table classification
            ; codeType=String
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment = サービスが利用できる会員
                    ; elementList = list:{Formalized;Provisional}
                }
                ; lastestStatus = map:{
                    ; elementList = list:{Withdrawal}
                }
            }
        }
        ; map:{
            ; table=MEMBER_STATUS
            ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER
            ; subItemMap=map:{key1=DISPLAY_ORDER;key2=MEMBER_STATUS_NAME; key3=null}
        }
    }

    # the test of boolean flg
    ; BooleanFlg = list:{
        ; map:{
            ; topComment=boolean classification for boolean column
            ; codeType=Boolean; isCheckImplicitSet=false
            # no check for test
        }
        ; map:{code=true; name=True ; alias=Checked  ; comment=means yes}
        ; map:{code=false; name=False; alias=Unchecked; comment=means no}
    }

    # the test of variant relation (biz-many-to-one)
    # and groupingMap for implicit classification
    ; VariantRelationMasterType = list:{
        ; map:{
            ; topComment=master type of variant relation (biz-many-to-one)
            ; codeType=String; isCheckImplicitSet=true
            ; groupingMap = map:{
                ; fooBarQux = map:{
                    ; groupComment = Foo or Bar or Qux
                    ; elementList = list:{FooCls;BarCls;QuxCls}
                }
            }
        }
        ; map:{code=FOO; name=FooCls}
        ; map:{code=BAR; name=BarCls}
        ; map:{code=QUX; name=QuxCls}
        ; map:{code=CORGE; name=CorgeCls}
    }
    ; VariantRelationQuxType = list:{
        ; map:{
            ; topComment=qux type of variant relation (biz-many-to-one)
            ; codeType=String; isCheckImplicitSet=true
        }
        ; map:{code=Qua} ; map:{code=Que} ; map:{code=Quo}
    }

    # the test of all-in-one merged
    ; QuxCls = list:{
        ; map:{
            ; topComment=merged; codeType=String
        }
        ; map:{code=MRG; name=Merged; comment=merged qux element}
    }
    ; CorgeCls = list:{
        ; map:{
            ; topComment=merged & docOnly; codeType=String; isUseDocumentOnly=true
        }
        ; map:{code=MRG; name=Merged; comment=merged corge element}
    }

    # the test of escaped for DfProp
    ; EscapedDfpropCls = list:{
        ; map:{
            ; topComment=delimiter\; & endBrace\} & path\foo\bar; codeType=String
        }
        # needs space before real delimiter ';'
        # needs escape char escape on CDef
        ; map:{code=\;@\\ ; name=First; comment=delimiter & rear escape char}
        ; map:{code=\\\}\;; name=Second; comment=escape char & endBrace & delimiter}
        ; map:{code=\{\=\}; name=Third; comment=startBrace & equal & endBrace}
    }

    # the test of escaped for JavaDoc
    ; EscapedJavaDocCls = list:{
        ; map:{
            ; topComment=/*IF pmb.yourTop*/><&
            ; codeType=String
            ; groupingMap = map:{
                ; lineGroup = map:{
                    ; groupComment = /*IF pmb.yourGroup*/><&
                    ; elementList = list:{ First ; Second }
                }
            }
        }
        ; map:{code=FOO ; name=First
            ; comment=/*IF pmb.yourFooComment*/><&
        }
        ; map:{code=BAR; name=Second
            ; comment=/*IF pmb.yourBarComment*/><&
        }
    }

    # the test of line separator
    ; LineSepCommentCls = list:{
        ; map:{
            ; topComment=top first line
            top second line
            top third line
            ; codeType=String
            ; groupingMap = map:{
                ; lineGroup = map:{
                    ; groupComment = group first line
                    group second line
                    ; elementList = list:{ First ; Second }
                }
            }
        }
        ; map:{code=FOO ; name=First
            ; comment=foo first line
            foo second line

        }
        ; map:{code=BAR; name=Second
            ; comment=bar first line


            bar second line
        }
    }
}
# ----------------/

