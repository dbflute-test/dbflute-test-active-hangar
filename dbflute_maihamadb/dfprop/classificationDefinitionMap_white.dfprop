# /---------------------------------------------------------------------------
# classificationDefinitionMap: (NotRequired - Default map:{})
#
# The definition of classification.
#
# Specification:
# map: {
#     [classification-name] = list:{
#         ; map:{
#             ; topComment=[comment]; codeType=[String(default) or Number or Boolean]
#             ; undefinedHandlingType=[EXCEPTION or LOGGING(default) or ALLOWED]
#             ; isUseDocumentOnly=[true or false(default)]
#             ; isSuppressAutoDeploy=[true or false(default)]
#             ; groupingMap = map:{
#                 ; [group-name] = map:{
#                     ; groupComment=[comment]
#                     ; elementList=list:{[the list of classification element's name]}
#                 }
#             }
#         }
#         # classification elements for implicit classification
#         ; map:{
#             ; code=[code]; name=[name]; alias=[alias]; comment=[comment]
#             ; sisterCode=[code or code-list]; subItemMap=map:{[free-map]}
#         }
#         # settings for table classification
#         ; map:{
#             ; table=[table-name]
#             ; code=[column-name for code]; name=[column-name for name]
#             ; alias=[column-name for alias]; comment=[column-name for comment]}
#             ; where=[condition for select]; orderBy=[column-name for ordering]
#             ; exceptCodeList=[the list of except code]
#         }
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    ; WhiteClassifiationDeploymentType = list:{
        ; map:{
            ; topComment=test of deployment
            ; codeType=String ; undefinedHandlingType=EXCEPTION
        }
        ; map:{code=SEA;name=Sea ;alias=sea}
        ; map:{code=LAN;name=Land;alias=land}
    }
    ; WhiteTableOptionStatus = list:{
        ; map:{
            ; topComment=test of various options when table classification
            ; codeType=String ; undefinedHandlingType=EXCEPTION
            ; groupingMap = map:{
                ; serviceAvailable = map:{
                    ; groupComment=can use service

                    # by name attribute, safety (exception if not found)
                    ; elementList=list:{ Formalized ; Provisional }
                }
            }
        }
        ; map:{
            ; table=MEMBER_STATUS
            ; code=MEMBER_STATUS_CODE; name=MEMBER_STATUS_NAME
            ; comment=DESCRIPTION; orderBy=DISPLAY_ORDER

            # can use column name for sister code
            # while, cannot define sisters if no column
            ; sisterCode=list:{ DISPLAY_ORDER }

            # can use column name for sub item
            # while, cannot define sisters if no column
            ; subItemMap=map:{
                ; key1=DISPLAY_ORDER
                ; key2=DESCRIPTION
            }
        }
    }
}
# ----------------/

